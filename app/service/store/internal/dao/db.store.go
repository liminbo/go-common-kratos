// Code generated by kratos tool genbts. DO NOT EDIT.

/*
  Package dao is a generated cache proxy package.
  It is generated from:
  type Dao interface {
		Close()
		Ping(ctx context.Context) (err error)
		// bts: -nullcache=&model.Article{ID:-1} -check_null_code=$!=nil&&$.ID==-1
		Article(c context.Context, id int) (*model.Article, error)
	}
*/

package dao

import (
	"context"
	"github.com/go-kratos/kratos/pkg/log"
	v1 "go-common/app/service/store/api"
	"go-common/app/service/store/internal/model"
	"github.com/jinzhu/gorm"
	"strconv"
	"strings"
)

func (d *dao) StoreByIds(ctx context.Context, storeIds []int) (stores []*model.Store, e error) {
	storeIdsStrs := make([]string, 0, len(storeIds))
	for _, val := range storeIds{
		_storeIdStr := strconv.Itoa(val)
		storeIdsStrs = append(storeIdsStrs, _storeIdStr)
	}

	if err := d.db.Where("id IN (?)", storeIds).Order(gorm.Expr("FIND_IN_SET(id,?)", strings.Join(storeIdsStrs, ","))).Find(&stores).Error; err != nil{
		log.Error("error is %v", err)
	}
	return
}

func (d *dao) StoreDetail(ctx context.Context, storeId int) (store *model.Store, err error) {
	store = new(model.Store)
	if err := d.db.Where("id=?", storeId).First(store).Error;err != nil{
		log.Error("db error:%v", err)
	}
	return
}

func (d *dao) OfflineStoreDetail(ctx context.Context, storeId int) (offlineStore *model.OfflineStore, err error) {
	var store *model.Store

	if store, err = d.StoreDetail(ctx, storeId);err != nil{
		log.Error("db error:%v", err)
	}
	if store.Type != model.STORE_TYPE_OFFLINE{
		log.Warn("store no offline id:%v", storeId)
		return
	}
	offlineStore = new(model.OfflineStore)
	offlineStore.CloneStore(store)
	offlineStore.CloneAttr(store.Attr)
	offlineStore.CloneAddress(store.Address)
	return
}

func (d *dao) OnlineStoreDetail(ctx context.Context, storeId int) (onlineStore *model.OnlineStore, err error) {
	var store *model.Store

	if store,err = d.StoreDetail(ctx, storeId);err != nil{
		log.Error("db error:%v", err)
	}
	if store.Type != model.STORE_TYPE_ONLINE{
		log.Warn("store no online id:%v", storeId)
		return
	}

	onlineStore = new(model.OnlineStore)
	onlineStore.CloneStore(store)
	onlineStore.CloneAttr(store.Attr)
	onlineStore.CloneAddress(store.Address)
	return
}

func (d *dao) DeleteStore(ctx context.Context, storeId int) (err error) {
	store := &model.Store{}
	if err = d.db.Where("id=?", storeId).Delete(store).Error;err != nil{
		return
	}
	return
}

func (d *dao) AddStore(ctx context.Context, req *v1.EditStoreReq) (storeId int, err error) {
	storeCtx := &StoreCtx{
		ctx:   ctx,
		dao:   d,
		req: req,
	}
	nilHandle := new(StoreNilHandle)
	nilHandle.setNext(&StoreAddHandle{}).setNext(&StoreAttrHandle{}).setNext(&StoreAddressHandle{}).setNext(&StoreCountHandle{}).setNext(&StoreResourceHandle{}).setNext(&StoreBelongHandle{})
	if err := nilHandle.Run(storeCtx); err !=nil{
		log.Error("ERROR: %v", err)
	}
	return
}

func (d *dao) EditStore(ctx context.Context, req *v1.EditStoreReq) (err error){
	storeCtx := &StoreCtx{
		ctx:   ctx,
		dao:   d,
		req:   req,
	}
	nilHandle := new(StoreNilHandle)
	nilHandle.setNext(&StoreEditHandle{}).setNext(&StoreAttrHandle{}).setNext(&StoreAddressHandle{}).setNext(&StoreResourceHandle{}).setNext(&StoreBelongHandle{})
	if err := nilHandle.Run(storeCtx); err !=nil{
		log.Error("ERROR: %v", err)
	}
	return
}


func (d *dao) StoreResourceList(ctx context.Context, storeId, resourceType int) (resources []*model.StoreResource, err error) {
	resources = []*model.StoreResource{}
	if err := d.db.Where("store_id=? AND type=?", storeId, resourceType).Find(&resources).Error; err != nil{
		log.Error("db error : %v", err)
	}
	return
}

func (d *dao) StoreResourceImageList(ctx context.Context, storeId int) (list []*model.StoreResourceImage, err error) {
	var(
		resources []*model.StoreResource
	)

	if resources,err = d.StoreResourceList(ctx, storeId, model.STORE_RESOURCE_TYPE_IMAGE); err != nil{
		log.Error("db error : %v", err)
	}
	list = make([]*model.StoreResourceImage, 0, len(resources))
	for _,val := range resources{
		resourceImage := &model.StoreResourceImage{}
		resourceImage.Clone(val)
		list = append(list, resourceImage)
	}
	return list,err
}

func (d *dao) StoreResourceVideoList(ctx context.Context, storeId int) (list []*model.StoreResourceVideo, err error) {
	var(
		resources []*model.StoreResource
	)
	if err := d.db.Where("store_id=? AND type=?", storeId, model.STORE_RESOURCE_TYPE_VIDEO).Find(&resources).Error; err != nil{
		log.Error("db error : %v", err)
	}

	list = make([]*model.StoreResourceVideo, 0, len(resources))
	for _,val := range resources{
		resourceVideo := &model.StoreResourceVideo{}
		resourceVideo.Clone(val)
		list = append(list, resourceVideo)
	}
	return
}

func (d *dao) StoreCount(ctx context.Context, storeId int) (count *model.StoreCount, err error) {
	count = &model.StoreCount{}
	if err := d.db.Where("store_id=?", storeId).First(count).Error;err != nil{
		log.Error("db error:%v", err)
	}
	return
}

func (d *dao) StoreBelone(ctx context.Context, storeId int) (belongs []*model.StoreBelong, err error) {
	belongs = []*model.StoreBelong{}
	if err := d.db.Where("store_id=?", storeId).Find(&belongs).Error; err != nil{
		log.Error("db error : %v", err)
	}
	for _,val := range belongs{
		log.Info("data is %v", val.BelongIds)
	}
	return
}

func (d *dao) AddStoreResource(ctx context.Context, resource *model.StoreResource) (id int, err error) {
	if err = d.db.Create(&resource).Error; err != nil{
		log.Error("db error:%v", err)
		return
	}
	id = resource.Id
	return
}

func (d *dao) AddStoreResourceImage(ctx context.Context, storeId int, title, data string, dataInfo *model.StoreResourceImageExt) (id int, err error) {
	dataInfoStr,_ := dataInfo.Encode()
	imageResource := &model.StoreResource{
		StoreId:      storeId,
		Type:         model.STORE_RESOURCE_TYPE_IMAGE,
		Title:        title,
		Data:         data,
		DataInfo:     dataInfoStr,
	}
	if id, err = d.AddStoreResource(ctx, imageResource); err != nil{
		log.Error("db error:%v", err)
	}
	return
}

func (d *dao) AddStoreResourceVideo(ctx context.Context, storeId int, title, data string, dataInfo *model.StoreResourceVideoExt) (id int, err error) {
	dataInfoStr,_ := dataInfo.Encode()
	imageResource := &model.StoreResource{
		StoreId:      storeId,
		Type:         model.STORE_RESOURCE_TYPE_VIDEO,
		Title:        title,
		Data:         data,
		DataInfo:     dataInfoStr,
	}
	if id, err = d.AddStoreResource(ctx, imageResource); err != nil{
		log.Error("db error:%v", err)
	}
	return
}

func (d *dao) AddStoreBelone(ctx context.Context, storeId int, belongType int, belongIds string) (err error) {
	belong := &model.StoreBelong{
		StoreId:    storeId,
		BelongType: belongType,
		BelongIds:  belongIds,
	}
	if err = d.db.Create(belong).Error; err != nil{
		log.Error("db error:%v", err)
	}
	return
}

func (d *dao) SetStoreCount(ctx context.Context, storeId int, field string, count int) (err error) {
	if err = d.db.Model(&model.StoreCount{}).Where("store_id=?", storeId).UpdateColumn(field, count).Error; err != nil{
		log.Error("db error: %v", err)
	}
	return
}

func (d *dao) StoreDistrictList(ctx context.Context, storeId int) ([]*model.StoreDistrict, error) {
	panic("implement me")
}


func (d *dao) DeleteStoreResource(ctx context.Context, storeId int) (err error) {
	if err = d.db.Where("store_id=?", storeId).Delete(&model.StoreResource{}).Error; err != nil{
		log.Error("db delete ERROR: %v", err)
	}
	return
}

func (d *dao) DeleteStoreBelong(ctx context.Context, storeId int) (err error) {
	if err = d.db.Where("store_id=?", storeId).Delete(&model.StoreBelong{}).Error; err != nil{
		log.Error("db delete ERROR: %v", err)
	}
	return
}
